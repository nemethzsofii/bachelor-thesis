@page
@model WebApplication1.Pages.Finance.ReportsModel
@{
	ViewData["Title"] = "Reports";
}

<input id="current-user-id" type="hidden" value="@Model.UserData.Id" />

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary" id="finances-curr-month-area-chart-title"></h6>
    </div>
    <div class="card-body">
        <div class="chart-area">
            <canvas id="finances-curr-month-area-chart"></canvas>
        </div>
        <hr>
    </div>
</div>

<script>
        // Function to fetch transactions for the current month
    async function fetchTransactions(userId, type) {
        try {
            const response = await fetch(`/api/Transaction/user/${userId}/type/${type}`);
            if (!response.ok) {
                throw new Error(`Error: ${response.status} - ${response.statusText}`);
            }
            return await response.json();
        } catch (error) {
            console.error(`Failed to fetch ${type} transactions:`, error);
            return [];
        }
    }

    // Function to group transactions by day (only for the current month)
    function groupByDay(transactions) {
        let today = new Date();
        let currentYear = today.getFullYear();
        let currentMonth = today.getMonth();

        // Create an array for the last 30 days with default value 0
        let dailyData = new Array(31).fill(0);

        transactions.forEach(transaction => {
            let date = new Date(transaction.date);

            // Ensure the transaction is from the current month
            if (date.getFullYear() === currentYear && date.getMonth() === currentMonth) {
                let dayIndex = date.getDate() - 1; // Day of month (1-31) → Index (0-30)
                dailyData[dayIndex] += transaction.amount;
            }
        });

        return dailyData.slice(0, today.getDate()); // Return only up to the current day
    }

    function getCurrentMonth() {
        const months = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];
        const currentMonthIndex = new Date().getMonth(); // 0 = Jan, 11 = Dec
        return months[currentMonthIndex];
    }



    // Function to generate labels for the last 30 days
    function getDaysInMonth() {
        let today = new Date();
        let days = [];
        for (let i = 1; i <= today.getDate(); i++) {
            days.push(i + "."); // Formats like "1.", "2.", "3." (simpler format)
        }
        return days;
    }

    // Function to update the chart
    async function updateChart() {
        const userId = document.getElementById("current-user-id").value;

        var diagramTitle = document.getElementById("finances-curr-month-area-chart-title");
        diagramTitle.textContent = "Financial Overview - " +  getCurrentMonth();

        // Fetch income and expense transactions
        const incomeTransactions = await fetchTransactions(userId, "income");
        const expenseTransactions = await fetchTransactions(userId, "expense");

        // Process data
        const incomeData = groupByDay(incomeTransactions);
        const expenseData = groupByDay(expenseTransactions);
        const daysLabels = getDaysInMonth(); // Labels for X-axis

        // Create the chart
        var ctx = document.getElementById("finances-curr-month-area-chart");
        var myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: daysLabels, // Set labels to days of the current month
                datasets: [
                    {
                        label: "Income",
                        lineTension: 0.3,
                        backgroundColor: "rgba(78, 223, 115, 0.05)",
                        borderColor: "rgba(78, 223, 115, 1)",
                        pointRadius: 3,
                        pointBackgroundColor: "rgba(78, 223, 115, 1)",
                        pointBorderColor: "rgba(78, 223, 115, 1)",
                        data: incomeData
                    },
                    {
                        label: "Expense",
                        lineTension: 0.3,
                        backgroundColor: "rgba(223, 78, 78, 0.05)",
                        borderColor: "rgba(223, 78, 78, 1)",
                        pointRadius: 3,
                        pointBackgroundColor: "rgba(223, 78, 78, 1)",
                        pointBorderColor: "rgba(223, 78, 78, 1)",
                        data: expenseData
                    }
                ]
            },
            options: {
                maintainAspectRatio: false,
                layout: {
                    padding: {
                        left: 10,
                        right: 25,
                        top: 25,
                        bottom: 0
                    }
                },
                scales: {
                    xAxes: [{
                        time: {
                            unit: 'day'
                        },
                        gridLines: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            maxTicksLimit: 10
                        },
                        scaleLabel: {
                        display: true,
                        labelString: getCurrentMonth(),
                        fontSize: 11,
                        fontStyle: "bold"
                        }
                    }],
                    yAxes: [{
                        ticks: {
                            maxTicksLimit: 5,
                            padding: 10,
                            callback: function(value) {
                                return 'Ft' + number_format(value);
                            }
                        },
                        gridLines: {
                            color: "rgb(234, 236, 244)",
                            zeroLineColor: "rgb(234, 236, 244)",
                            drawBorder: false,
                            borderDash: [2],
                            zeroLineBorderDash: [2]
                        },
                        scaleLabel: {
                        display: true,
                        labelString: "Amount (Ft)",
                        fontSize: 11,
                        fontStyle: "bold"
                    }
                    }]
                },
                legend: {
                    display: true
                },
                tooltips: {
                    backgroundColor: "rgb(255,255,255)",
                    bodyFontColor: "#858796",
                    titleMarginBottom: 10,
                    titleFontColor: '#6e707e',
                    titleFontSize: 14,
                    borderColor: '#dddfeb',
                    borderWidth: 1,
                    xPadding: 15,
                    yPadding: 15,
                    displayColors: true,
                    intersect: false,
                    mode: 'index',
                    caretPadding: 10,
                    callbacks: {
                        label: function(tooltipItem, chart) {
                            var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
                            return datasetLabel + ': Ft' + number_format(tooltipItem.yLabel);
                        }
                    }
                }
            }
        });
    }

    // Run function on page load
    document.addEventListener("DOMContentLoaded", updateChart);

</script>