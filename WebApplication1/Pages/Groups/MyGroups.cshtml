@page
@model WebApplication1.Pages.Groups.MyGroupsModel
@{
	ViewData["Title"] = "My Groups";
}
<input id="current-user-id" type="hidden" value="@Model.UserData.Id" />

<div id="groups-container">
	<ul class="nav nav-tabs" id="groups-tab" role="tablist">
	</ul>
	<div class="tab-content" id="groups-tab-content">

	</div>
</div>

<script src="~/js/add-income-expense.js" asp-append-version="true"></script>
<script>
	document.addEventListener("DOMContentLoaded", function () {
		(async () => {
		  try {
			var userId = await getCurrentUserId();
			var result = await getGroupsForCurrentUser();
			await displayGroups(result);
			for(let i=0; i < result.length; i++){
				createHistoryTable(result[i].groupId);
			}

			document.querySelectorAll(".delete-form").forEach(form => {
				form.addEventListener("submit", async function(e) {
					e.preventDefault();

					const groupId = form.id.split('-')[2];
					await deleteGroup(groupId);
				})
			});

			document.querySelectorAll(".invite-form").forEach(form => {
			  form.addEventListener("submit", async function (e) {
				e.preventDefault();

				const groupId = form.id.split('-')[2];
				const userName = form.querySelector(".username-input").value;
				const resultMessage = form.querySelector(".result-message");

				const user = await getUserByUsername(userName);

				if (user) {
				  const receiverUserId = user["id"];
				  const statusCode = await postInvite(parseInt(groupId), userId, receiverUserId);

				  if (statusCode === 409) {
					resultMessage.textContent = "Invite already exists!";
					resultMessage.classList.add("text-danger");
					resultMessage.classList.remove("text-success");
				  } else if (statusCode === 400) {
					resultMessage.textContent = "Bad request!";
					resultMessage.classList.add("text-danger");
					resultMessage.classList.remove("text-success");
				  } else {
					resultMessage.textContent = "Invite sent successfully!";
					form.querySelector(".username-input").value = "";
					resultMessage.classList.add("text-success");
					resultMessage.classList.remove("text-danger");
				  }
				} else {
				  resultMessage.textContent = "Username not found!";
				  resultMessage.classList.add("text-danger");
				  resultMessage.classList.remove("text-success");
				}
			  });
			});

			$('.modal').on('hidden.bs.modal', function () {
			  const modalEl = this;

			  const resultMessage = modalEl.querySelector(".result-message");
			  if (resultMessage) {
				resultMessage.textContent = "";
				resultMessage.classList.remove("text-danger", "text-success");
			  }

			  const input = modalEl.querySelector(".username-input");
			  if (input) {
				input.value = "";
			  }
			});

		  } catch (error) {
			console.error('Error:', error);
		  }
		})();

		async function postInvite(groupId, senderUserId, receiverUserId){
			try {
				const response = await fetch("/api/Invite", {
				  method: "POST",
				  headers: { "Content-Type": "application/json" },
				  body: JSON.stringify({
					SenderUserId: senderUserId,
					ReceiverUserId: receiverUserId,
					GroupId: groupId
				  })
				});

				if (!response.ok) {
					const errorText = await response.text();
					console.error(`Error ${response.status}: ${errorText}`);
				}
				return response.status;
			  } catch (error){
				  console.log(error);
			  }
		}

		async function deleteGroup(groupId){
			try {
				const response = await fetch(`/api/Group/${groupId}`, {
				  method: "DELETE",
				  headers: { "Content-Type": "application/json" },
				  credentials: 'include'
				});

				if (!response.ok) {
					const errorText = await response.text();
					console.error(`Error ${response.status}: ${errorText}`);
				}
				return response.status;
			  } catch (error){
				  console.log(error);
			  }
		}

		async function getUserByUsername(username){
			try {
				const response = await fetch(`/api/User/username/${username}`, {
				  method: "GET",
				  headers: { "Content-Type": "application/json" }
				});
				if (!response.ok) return null;
				return response.json();
				
			  } catch (error){
				  console.log(error);
			  }
		}
		
		async function getGroupsForCurrentUser() {
			const response = await fetch("/api/GroupMembership/ByUser", {
				method: "GET",
				 headers: {
					"Content-Type": "application/json",
					"Accept": "application/json"
				},
				credentials: "include"
			});

			if (!response.ok) {
				const errorMessage = await response.json();
				displayBasicModal("Something went wrong!", "Error");
				console.error(`Error: ${response.status} - ${errorMessage}`);
			} else {
				const result = await response.json();
				return result;
			}
		}

		async function createHistoryTable(groupId){
			var table = new DataTable(`#finance-table-${groupId}`, {
				columns: [
				{ title: "User" },
				{ title: "Type" },
				{ title: "Category" },
				{ title: "Description" },
				{
					title: "Amount",
					className: "text-end",
					render: function (data, type, row) {
					const num = Number(data);
					if (type === 'display' || type === 'filter') {
						return `${num.toLocaleString('hu-HU')} Ft`;
					}
					return num;
					}
				},
				{ title: "Date" }
				]
			});

			var result = await listAllTransactions(null, null, groupId);
			if(!result || result.length === 0) {
				console.log("No transactions found for " + groupId);
				return;
			}
			console.log(`#finance-table-${groupId}`);
			console.log("Creating finance table with: ", result);
			
			for(let i = 0; i < result.length; i ++){
				console.log("Creating element");
				var fullName = "-"
				try{
					const user = await getUserById(result[i].userId);
					fullName =  user.fullname;
					console.log(fullName);
					console.log(user);
				}catch(error){
					console.error("fullName not found.");
				}
				
				const type = result[i].type;
				const isExpense = type.toLowerCase() === 'expense';

				console.log(table);
				const rowNode = table.row.add([
					`${fullName}`,
					`${isExpense ? '⬇️' : '⬆️'} ${type}`,
					`${result[i].categoryId}`,
					`${result[i].description}`,
					`${result[i].amount}`,
					`${result[i].date}`
				]).draw(false).node();
				console.log("Added node");
				//$(rowNode).css('background-color', isExpense ? '#ffe5e5' : '#e5ffe5');
				$(rowNode).css('color', isExpense ? '#a10000' : '#007f00');

			}
		}

		async function displayGroups(result){
			var containerDiv = document.getElementById("groups-container");
			var groupsTab = document.getElementById("groups-tab");
			var groupsContent = document.getElementById("groups-tab-content");

			console.log(result);
			if (result.lentgh == 0){
				containerDiv.innerHTML = "No groups:(";
			}else{
				for(let i=0; i < result.length; i++){
					var group = await getGroupById(result[i].groupId);
					var role = await getRoleById(result[i].roleId);

					groupsTab.innerHTML += `
					<li class="nav-item">
					<a class="nav-link ${i == 0 ? 'active' : ''}" id="${i}-tab" data-toggle="tab" href="#content${i}" role="tab" aria-controls="content${i}" aria-selected="true">${group.name}</a>
					</li>
					`

					groupsContent.innerHTML +=
					`
					<div class="tab-pane fade show ${i == 0 ? 'active' : ''}" id="content${i}" role="tabpanel" aria-labelledby="${i}-tab" style="padding: 15px">
					<div class="card shadow mb-4">
								<div class="card-header py-3 d-flex flex-row align-items-center justify-content-between rounded-top-4">
									<div style="display: block">
										<h6 class="m-0">${group.name}</h6>
										<h10>Description:</h10>
										${group.description} <br>
										<h10>Role:</h10>
										${role.name} <br>
									</div>

								<div class="dropdown no-arrow">
								  <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
									 data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
									<i class="fas fa-ellipsis-v"></i>
								  </a>

								  <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuLink">
									<h6 class="dropdown-header">Action</h6>
									<a class="dropdown-item" href="#" data-toggle="modal" data-target="#inviteModal-${group.id}">
									  Add member
									</a>
									${result[i].roleId == 1 ? '<div class="dropdown-divider"></div><a class="dropdown-item text-danger" href="#" data-toggle="modal" data-target="#deleteModal-${group.id}">Delete group</a>' : ''}
								  </ul>
								</div>

								<!-- Invite Modal -->
								<div class="modal fade" id="inviteModal-${group.id}" tabindex="-1" role="dialog" aria-labelledby="inviteModalLabel" aria-hidden="true">
								  <div class="modal-dialog" role="document">
									<div class="modal-content rounded-4 shadow">
									  <div class="modal-header">
										<h5 class="modal-title" id="inviteModalLabel">Send Invite</h5>
										<button type="button" class="close" data-dismiss="modal" aria-label="Close">
										  <span aria-hidden="true">&times;</span>
										</button>
									  </div>

									  <div class="modal-body">
										<form id="invite-form-${group.id}" class="invite-form">
										  <div class="mb-3">
											<h6 class="result-message"></h6>
											<label for="username-input-${group.id}" class="form-label">Username</label>
											<input type="text" class="form-control username-input" id="username-input-${group.id}" name="username-input" required>
										  </div>
										</form>
									  </div>

									  <div class="modal-footer">
										<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
										<button type="submit" form="invite-form-${group.id}" class="btn btn-primary">Send Invite</button>
									  </div>
									</div>
								  </div>
								</div>

								<!-- Group Deletion Modal -->
								<div class="modal fade" id="deleteModal-${group.id}" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
								  <div class="modal-dialog" role="document">
									<div class="modal-content rounded-4 shadow">
									  <div class="modal-header">
										<h5 class="modal-title" id="deleteModalLabel">Are you sure you want to delete the group? This
										action can not be undone!</h5>
										<button type="button" class="close" data-dismiss="modal" aria-label="Close">
										  <span aria-hidden="true">&times;</span>
										</button>
									  </div>

									  <div class="modal-body">
										<form id="delete-form-${group.id}" class="delete-form">
										  <div class="mb-3">
											<h6 class="result-message"></h6>
								
										  </div>
										</form>
									  </div>

									  <div class="modal-footer">
										<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
										<button type="submit" form="delete-form-${group.id}" class="btn btn-primary">Delete</button>
									  </div>
									</div>
								  </div>
								</div>



								</div>
								<div class="card-body">
									<div class="card mb-3" style="padding: 5px;">
									  <div class="card-body">
										<h5 class="card-title">Group Activity</h5>
											<div class="row" style="padding: 5px">
												<div class="col">
													<div class="input-card income-card group-card">
														<div class="card border-left-success shadow h-100 py-2">
															<div class="card-body">
																<div class="row no-gutters align-items-center">
																	<div class="col mr-2">
																		<div class="text-xs font-weight-bold text-success text-uppercase mb-1">
																			INCOME
																		</div>
																		<div class="h5 mb-0 font-weight-bold text-gray-400">New Income Entry</div>
																	</div>
																	<div class="col-auto">
																		<i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
																	</div>

																	<div class="col-auto" style="margin-left: 10px">
																		<button class="add-btn btn btn-success" id="add-income-btn">Add</button>
																	</div>
																</div>

																<div id="income-input-div" class="input-container" style="display: none; margin-top: 13px">
																	<table style="padding: 3px">
																		<tr>
																			<td><label for="income-amount-input-field">Amount:</label></td>
																			<td><input class="input-amount" id="income-amount-input-field" name="income-amount-input-field" type="number" /></td>
																		</tr>
																		<tr>
																			<td><label for="income-desc-input-field">Description:</label></td>
																			<td><input class="input-desc" id="income-desc-input-field" name="income-desc-input-field" type="text" /></td>
																		</tr>
																	</table>

																	<input type="hidden" name="group-id" id="group-id" class="input-group" value="${group.id}" />

																	<button class="btn save-btn">SAVE</button>
																	<button class="btn cancel-btn">CANCEL</button>
																</div>
															</div>
														</div>
													</div>
												</div>
												<div class="col">
													<div class="input-card expense-card group-card">
														<div class="card border-left-info shadow h-100 py-2">
															<div class="card-body">
																<div class="row no-gutters align-items-center">
																	<div class="col mr-2">
																		<div class="text-xs font-weight-bold text-info text-uppercase mb-1">
																			EXPENSE
																		</div>
																		<div class="h5 mb-0 font-weight-bold text-gray-400">New Expense Entry</div>
																	</div>
																	<div class="col-auto">
																		<i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
																	</div>

																	<div class="col-auto" style="margin-left: 10px">
																		<button class="add-btn btn btn-info" id="add-expense-btn">Add</button>
																	</div>
																</div>

																<div id="expense-input-div" class="input-container" style="display: none; margin-top: 13px">
																	<table style="padding: 3px">
																		<tr>
																			<td><label for="expense-amount-input-field">Amount:</label></td>
																			<td><input class="input-amount" id="expense-amount-input-field" name="expense-amount-input-field" type="number" /></td>
																		</tr>
																		<tr>
																			<td><label for="expense-desc-input-field">Description:</label></td>
																			<td><input class="input-desc" id="expense-desc-input-field" name="expense-desc-input-field" type="text" /></td>
																		</tr>
																	</table>

																	<input type="hidden" name="group-id" id="group-id" class="input-group" value="${group.id}" />

																	<button class="btn save-btn">SAVE</button>
																	<button class="btn cancel-btn">CANCEL</button>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>

											<div class="row justify-content-center">
												<div class="col-lg-10" style="padding: 5px">
													<div class="card border-2 rounded-4 shadow-sm" style="border-color: #36b9cc;">
														<div class="card-header text-white rounded-top-4" style="background: linear-gradient(135deg, #4e73df, #1cc88a);">
															<h5 class="mb-2 fw-bold text-center">Transactions Table</h5>
															
														</div>

														<div class="card-body bg-white rounded-bottom-4">
															<table id="finance-table-${group.id}" class="table table-hover align-middle">
																<thead class="table-primary">
																	<tr>
																		<th>User</th>
																		<th>Type</th>
																		<th>Category</th>
																		<th>Description</th>
																		<th>Amount</th>
																		<th>Date</th>
																	</tr>
																</thead>
																<tbody id="tbody">
																	<!-- Dynamic rows go here -->
																</tbody>
																<tfoot class="table-light">
																	<tr>
																		<th>User</th>
																		<th>Type</th>
																		<th>Category</th>
																		<th>Description</th>
																		<th>Amount</th>
																		<th>Date</th>
																	</tr>
																</tfoot>
															</table>
														</div>
													</div>
												</div>
											</div>

										<p class="card-text"><small class="text-muted">Created: ${Date(group.createdAt)}</small></p>
									  </div>
									</div>
								</div>
							</div>
					</div>
					`
				}
			}
		}
		async function getUserById(id){
			const response = await fetch(`/api/User/${id}`, {
				method: "GET",
				 headers: {
					"Content-Type": "application/json",
					"Accept": "application/json"
				},
				credentials: "include"
			});

			if (!response.ok) {
				const errorMessage = await response.json();
				console.error(`Error: ${response.status} - ${errorMessage}`);
				return null;
			} else {
				const result = await response.json()
				return result;
			}
		}
		async function getRoleById(id) {
			const response = await fetch(`/api/Role/${id}`, {
				method: "GET",
				 headers: {
					"Content-Type": "application/json",
					"Accept": "application/json"
				},
				credentials: "include"
			});

			if (!response.ok) {
				const errorMessage = await response.json();
				displayBasicModal("Something went wrong!", "Error");
				console.error(`Error: ${response.status} - ${errorMessage}`);
				return null;
			} else {
				const result = await response.json()
				return result;
			}
		}

		async function getGroupById(id) {
			const response = await fetch(`/api/Group/${id}`, {
				method: "GET",
				 headers: {
					"Content-Type": "application/json",
					"Accept": "application/json"
				},
				credentials: "include"
			});

			if (!response.ok) {
				const errorMessage = await response.json();
				displayBasicModal("Something went wrong!", "Error");
				console.error(`Error: ${response.status} - ${errorMessage}`);
				return null;
			} else {
				const result = await response.json()
				return result;
			}
		}

		async function listAllTransactions(userId, type, groupId)
		{
			try {
				var response = "";
				if(!type && !groupId && userId){
					response = await fetch(`api/Transaction/user/${userId}`, {
					method: "GET",
					headers: {
						"Content-Type": "application/json"
					}
				});
				}else if(!type && !userId && groupId){
					response = await fetch(`/api/Transaction/group/${groupId}`, {
					method: "GET",
					headers: {
						"Content-Type": "application/json"
					}
				});
				}else if(!groupId && type && userId){
					response = await fetch(`api/Transaction/user/${userId}/type/${type}`, {
					method: "GET",
					headers: {
						"Content-Type": "application/json"
					}
				});
				}else if(!type && userId && groupId){
					response = await fetch(`api/Transaction/user/${userId}/group/${group}`, {
					method: "GET",
					headers: {
						"Content-Type": "application/json"
					}
				});
				}

				if (!response.ok) {
					throw new Error(`Error: ${response.status} - ${response.statusText}`);
				}

				var result = await response.json();
				console.log("Listed transactions successfully:", result);
				return result;
			} catch (error) {
				console.error("Failed to list transactions:", error);
				return null;
			}
		}
	});

</script>